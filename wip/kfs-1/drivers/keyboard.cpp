/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   keyboard.cpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ecaceres <ecaceres@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/05 19:54:31 by ecaceres          #+#    #+#             */
/*   Updated: 2023/02/05 19:54:31 by ecaceres         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <drivers/keyboard.hpp>
#include <cpu/interrupt.hpp>
#include <cpu/io.hpp>
#include <stdio.h>
#include <string.h>

#define KEYBD_DATA 0x60
#define KEYBD_CMD 0x64

namespace kfs::keyboard
{
	static uint32_t pressed_count = 0;
	static void (*callback)(key_t) = NULL;
	static bool shift = false;

	typedef struct
	{
			char regular;
			char shift;
			char ctrl;
	} mapping_t;

	static mapping_t mappings[255] = {
		[0] = { 0, 0, 0 },
		[1] = { 27, 27, 27 }, // Esc
		[2] = { 49, 33, 0 }, // 1 !
		[3] = { 50, 64, 0 }, // 2 @
		[4] = { 51, 35, 0 }, // 3 #
		[5] = { 52, 36, 0 }, // 4 $
		[6] = { 53, 37, 0 }, // 5 %
		[7] = { 54, 94, 30 }, // 6 ^
		[8] = { 55, 38, 0 }, // 7 &
		[9] = { 56, 42, 0 }, // 8 *
		[10] = { 57, 40, 0 }, // 9 (
		[11] = { 48, 41, 0 }, // 0 )
		[12] = { 45, 95, 31 }, // - _
		[13] = { 61, 43, 0 }, // = +
		[14] = { 8, 8, 127 }, // Backspace
		[15] = { 9, 0, 0 }, // Tab
		[16] = { 113, 81, 17 }, // Q
		[17] = { 119, 87, 23 }, // W
		[18] = { 101, 69, 5 }, // E
		[19] = { 114, 82, 18 }, // R
		[20] = { 116, 84, 20 }, // T
		[21] = { 121, 89, 25 }, // Y
		[22] = { 117, 85, 21 }, // U
		[23] = { 105, 73, 9 }, // I
		[24] = { 111, 79, 15 }, // O
		[25] = { 112, 80, 16 }, // P
		[26] = { 91, 123, 27 }, // [ {
		[27] = { 93, 125, 29 }, // ] }
		[28] = { 13, 13, 10 }, // Enter
		[29] = { 0, 0, 0 },
		[30] = { 97, 65, 1 }, // A
		[31] = { 115, 83, 19 }, // S
		[32] = { 100, 68, 4 }, // D
		[33] = { 102, 70, 6 }, // F
		[34] = { 103, 71, 7 }, // G
		[35] = { 104, 72, 8 }, // H
		[36] = { 106, 74, 10 }, // J
		[37] = { 107, 75, 11 }, // K
		[38] = { 108, 76, 12 }, // L
		[39] = { 59, 58, 0 }, // ; :
		[40] = { 39, 34, 0 }, // ' "
		[41] = { 96, 126, 0 }, // ` Ëœ
		[42] = { 0, 0, 0 },
		[43] = { 92, 124, 28 }, // \ |
		[44] = { 122, 90, 26 }, // Z
		[45] = { 120, 88, 24 }, // X
		[46] = { 99, 67, 3 }, // C
		[47] = { 118, 86, 22 }, // V
		[48] = { 98, 66, 2 }, // B
		[49] = { 110, 78, 14 }, // N
		[50] = { 109, 77, 13 }, // M
		[51] = { 44, 60, 0 }, // , <
		[52] = { 46, 62, 0 }, // . >
		[53] = { 47, 63, 0 }, // / ?
		[54] = { 0, 0, 0 },
		[55] = { 42, 42, 0 }, // *
		[56] = { 0, 0, 0 },
		[57] = { 32, 32, 32 }, // Space
		[58] = { 0, 0, 0 },
		[59] = { 0, 0, 0 },
		[60] = { 0, 0, 0 },
		[61] = { 0, 0, 0 },
		[62] = { 0, 0, 0 },
		[63] = { 0, 0, 0 },
		[64] = { 0, 0, 0 },
		[65] = { 0, 0, 0 },
		[66] = { 0, 0, 0 },
		[67] = { 0, 0, 0 },
		[68] = { 0, 0, 0 },
		[69] = { 0, 0, 0 },
		[70] = { 0, 0, 0 },
		[71] = { 0, 55, 0 }, // Home
		[72] = { 0, 56, 0 }, // Up
		[73] = { 0, 57, 0 }, // PgUp
		[74] = { 45, 45, 0 }, // Minus
		[75] = { 0, 52, 0 }, // Left
		[76] = { 0, 53, 0 }, // 5
		[77] = { 0, 54, 0 }, // Right
		[78] = { 43, 43, 0 }, // Plus
		[79] = { 0, 49, 0 }, // End
		[80] = { 0, 50, 0 }, // Down
		[81] = { 0, 51, 0 }, // PgDn
		[82] = { 0, 48, 0 }, // Ins
		[83] = { 0, 46, 0 }, // Del
		[84] = { 0, 0, 0 },
		[85] = { 0, 0, 0 },
		[86] = { 0, 0, 0 },
		[87] = { 0, 0, 0 },
		[88] = { 0, 0, 0 },
		[89] = { 0, 0, 0 },
		[90] = { 0, 0, 0 },
		[91] = { 0, 0, 0 },
		[92] = { 0, 0, 0 },
		[93] = { 0, 0, 0 },
		[94] = { 0, 0, 0 },
		[95] = { 0, 0, 0 },
		[96] = { 0, 0, 0 },
		[97] = { 0, 0, 0 },
		[98] = { 0, 0, 0 },
		[99] = { 0, 0, 0 },
		[100] = { 0, 0, 0 },
		[101] = { 0, 0, 0 },
		[102] = { 0, 0, 0 },
		[103] = { 0, 0, 0 },
		[104] = { 0, 0, 0 },
		[105] = { 0, 0, 0 },
		[106] = { 0, 0, 0 },
		[107] = { 0, 0, 0 },
		[108] = { 0, 0, 0 },
		[109] = { 0, 0, 0 },
		[110] = { 0, 0, 0 },
		[111] = { 0, 0, 0 },
		[112] = { 0, 0, 0 },
		[113] = { 0, 0, 0 },
		[114] = { 0, 0, 0 },
		[115] = { 0, 0, 0 },
		[116] = { 0, 0, 0 },
		[117] = { 0, 0, 0 },
		[118] = { 0, 0, 0 },
		[119] = { 0, 0, 0 },
		[120] = { 0, 0, 0 },
		[121] = { 0, 0, 0 },
		[122] = { 0, 0, 0 },
		[123] = { 0, 0, 0 },
		[124] = { 0, 0, 0 },
		[125] = { 0, 0, 0 },
		[126] = { 0, 0, 0 },
		[127] = { 0, 0, 0 },
		[128] = { 0, 0, 0 },
		[129] = { 0, 0, 0 },
		[130] = { 0, 0, 0 },
		[131] = { 0, 0, 0 },
		[132] = { 0, 0, 0 },
		[133] = { 0, 0, 0 },
		[134] = { 0, 0, 0 },
		[135] = { 0, 0, 0 },
		[136] = { 0, 0, 0 },
		[137] = { 0, 0, 0 },
		[138] = { 0, 0, 0 },
		[139] = { 0, 0, 0 },
		[140] = { 0, 0, 0 },
		[141] = { 0, 0, 0 },
		[142] = { 0, 0, 0 },
		[143] = { 0, 0, 0 },
		[144] = { 0, 0, 0 },
		[145] = { 0, 0, 0 },
		[146] = { 0, 0, 0 },
		[147] = { 0, 0, 0 },
		[148] = { 0, 0, 0 },
		[149] = { 0, 0, 0 },
		[150] = { 0, 0, 0 },
		[151] = { 0, 0, 0 },
		[152] = { 0, 0, 0 },
		[153] = { 0, 0, 0 },
		[154] = { 0, 0, 0 },
		[155] = { 0, 0, 0 },
		[156] = { 0, 0, 0 },
		[157] = { 0, 0, 0 },
		[158] = { 0, 0, 0 },
		[159] = { 0, 0, 0 },
		[160] = { 0, 0, 0 },
		[161] = { 0, 0, 0 },
		[162] = { 0, 0, 0 },
		[163] = { 0, 0, 0 },
		[164] = { 0, 0, 0 },
		[165] = { 0, 0, 0 },
		[166] = { 0, 0, 0 },
		[167] = { 0, 0, 0 },
		[168] = { 0, 0, 0 },
		[169] = { 0, 0, 0 },
		[170] = { 0, 0, 0 },
		[171] = { 0, 0, 0 },
		[172] = { 0, 0, 0 },
		[173] = { 0, 0, 0 },
		[174] = { 0, 0, 0 },
		[175] = { 0, 0, 0 },
		[176] = { 0, 0, 0 },
		[177] = { 0, 0, 0 },
		[178] = { 0, 0, 0 },
		[179] = { 0, 0, 0 },
		[180] = { 0, 0, 0 },
		[181] = { 0, 0, 0 },
		[182] = { 0, 0, 0 },
		[183] = { 0, 0, 0 },
		[184] = { 0, 0, 0 },
		[185] = { 0, 0, 0 },
		[186] = { 0, 0, 0 },
		[187] = { 0, 0, 0 },
		[188] = { 0, 0, 0 },
		[189] = { 0, 0, 0 },
		[190] = { 0, 0, 0 },
		[191] = { 0, 0, 0 },
		[192] = { 0, 0, 0 },
		[193] = { 0, 0, 0 },
		[194] = { 0, 0, 0 },
		[195] = { 0, 0, 0 },
		[196] = { 0, 0, 0 },
		[197] = { 0, 0, 0 },
		[198] = { 0, 0, 0 },
		[199] = { 0, 0, 0 },
		[200] = { 0, 0, 0 },
		[201] = { 0, 0, 0 },
		[202] = { 0, 0, 0 },
		[203] = { 0, 0, 0 },
		[204] = { 0, 0, 0 },
		[205] = { 0, 0, 0 },
		[206] = { 0, 0, 0 },
		[207] = { 0, 0, 0 },
		[208] = { 0, 0, 0 },
		[209] = { 0, 0, 0 },
		[210] = { 0, 0, 0 },
		[211] = { 0, 0, 0 },
		[212] = { 0, 0, 0 },
		[213] = { 0, 0, 0 },
		[214] = { 0, 0, 0 },
		[215] = { 0, 0, 0 },
		[216] = { 0, 0, 0 },
		[217] = { 0, 0, 0 },
		[218] = { 0, 0, 0 },
		[219] = { 0, 0, 0 },
		[220] = { 0, 0, 0 },
		[221] = { 0, 0, 0 },
		[222] = { 0, 0, 0 },
		[223] = { 0, 0, 0 },
		[224] = { 47, 47, 0 }, // /
		[225] = { 0, 0, 0 },
		[226] = { 0, 0, 0 },
		[227] = { 0, 0, 0 },
		[228] = { 0, 0, 0 },
		[229] = { 0, 0, 0 },
		[230] = { 0, 0, 0 },
		[231] = { 0, 0, 0 },
		[232] = { 0, 0, 0 },
		[233] = { 0, 0, 0 },
		[234] = { 0, 0, 0 },
		[235] = { 0, 0, 0 },
		[236] = { 0, 0, 0 },
		[237] = { 0, 0, 0 },
		[238] = { 0, 0, 0 },
		[239] = { 0, 0, 0 },
		[240] = { 0, 0, 0 },
		[241] = { 0, 0, 0 },
		[242] = { 0, 0, 0 },
		[243] = { 0, 0, 0 },
		[244] = { 0, 0, 0 },
		[245] = { 0, 0, 0 },
		[246] = { 0, 0, 0 },
		[247] = { 0, 0, 0 },
		[248] = { 0, 0, 0 },
		[249] = { 0, 0, 0 },
		[250] = { 0, 0, 0 },
		[251] = { 0, 0, 0 },
		[252] = { 0, 0, 0 },
		[253] = { 0, 0, 0 },
		[254] = { 0, 0, 0 },
	};

	uint8_t to_letter(uint8_t scan_code)
	{
		mapping_t &mapping = mappings[scan_code & 0x7F];
//		if (ctrl && mapping.ctrl)
//			return (mapping.ctrl);

		if (shift && mapping.shift)
			return (mapping.shift);

		return (mapping.regular);
	}

	void handle(kfs::interrupt::registers_t regs)
	{
		uint8_t scan_code = kfs::io::inb(0x60);
		if (scan_code & 0x80)
		{
			++pressed_count;

//			printk("R %d\n", scancode & 0x7F);
			if (scan_code == 0xAA)
				shift = false;

			if (callback)
			{
				key_t key;
				key.state = false;
				key.shift = shift;
				key.scan_code = scan_code;
				key.letter = to_letter(scan_code & 0x7F);

				callback(key);
			}
		}
		else
		{
//			printk("P %d\n", scancode);
			if (scan_code == 0x2a)
				shift = true;

			if (callback)
			{
				mapping_t &mapping = mappings[scan_code];

				key_t key;
				key.state = true;
				key.shift = shift;
				key.scan_code = scan_code;
				key.letter = to_letter(scan_code);

				callback(key);
			}

//			else if (scancode == 0x1c)
//			{
//				printk("%c", '\n');
//			}
//			else if (scancode == 0x0e)
//			{
////				vga_backspace();
//			}
//			else if (shift)
//			{
//				printk("%c", charset_get(scancode + 90));
//			}
//			else
//			{
//				printk("%c", charset_get(scancode));
//			}
		}
	}

	void initialize(void)
	{
		kfs::interrupt::install(kfs::interrupt::IRQ1, "Keyboard", handle);
	}
	
	void set_callback(void (*function)(key_t))
	{
		callback = function;
	}

	void wait(void)
	{
		uint32_t start = pressed_count;
		while (start == pressed_count)
			kfs::io::halt();
	}
}
