class Selector:

	var readFds;
	var writeFds;
	
	def addRead(fd):
		readFds.add(fds)
	
	def addWrite(fd):
		writeFds.add(fds)
		
	def select():
		c = ::select(readFds, writeFds)
		
		for fd in readFds:
			fd.onReadable(fd, this)
		
		for fd in writeFds:
			fd.onWritable(fd, this)
		
		return c
	
	class Callback:
		
		def onReadable(fd, selector) = 0;
		def onWritable(fd, selector) = 0;

class Server extends Selector.Callback:

	var socket;
	
	def onReadable(fd, selector):
		selector.addRead(new Client(fd.accept()))
		
class CGIHandler extends Selector.Callback:
	
	var :client;
	var :resource;
	var pid;
	
	new(selector):
		pid.spawn()
	
		selector.addWrite(pid.stdin)
		selector.addRead(pid.stdout)
	
	def onReadable(fd, selector):
		c = fd.read(produced)
		
		if c > 0:
			if headerNotParsed():
				if parseHeader(produced):
					client.state = WRITE;
					selector.addWrite(client.socket);
					client.response = new Response(header);
			
			if headerParsed():
				client.response.storeAsChuncked(produced - header) /* Could cause problem if there was not enough space to store unchuncked data into the kernel buffer, the data will be truncated */
		
		if c == 0 && pid not running:
			end()
	
	def onWriteable(fd, selector):
		fd.write(client.request.body)
	
	def end():
		if client.response == null:
			client.response = new Response(200); /* Empty data */
			client.state = WRITE;
			selector.addWrite(client.socket);
	
		delete this;
		

class Client extends Selector.Callback:
	
	class Request:
		var method;
		var path;
		var headers;
		var body;
	
	class Response:
		var code;
		var headers;
		var body;
		
	class CGI:
		var script;
		var pid;

	var socket;
	var state: [ INIT, READ, PROCESS, WRITE, FINISHED ] = INIT
	var request;
	var process;
	var response;
	
	def onReadable(fd, selector):
		switch state:
			case INIT:
				state = READ;
			
				if selector.overload():
					selector.addWrite(socket)
					selector.removeRead(socket)
					
					return respond(503)
				
				break;
			
			case READ:
				::read(socket)
				
				if not request.isParsed():
				
					if request.parse():
					
						if request.isError():
							selector.addWrite(socket)
							selector.removeRead(socket)
							
							return respond(400)
						
						if request.isOk():
							selector.removeRead(socket)
							return methodHandler()
				
				break;
				
			default:
				break;
	
	def onWritable(fd, selector):
		if response.buffer.notEmpty():
			fd.write(response.buffer)
		
	def methodHandler():
		resource = path
	
		if request.method == "GET" or "HEAD":
			if path.isdir && indexfiles:
				for indexfile in indexfiles:
					if indexfile.exists():
						resource = indexfile
						break;
		
		if is cgi:
			state = PROCESS
			process = CGIHandler(this, selector, resource) or 502 /* bad gateway */
		else
			_response = realMethodHandler(resource) /* TODO POST and/or PUT shoud be in PROCESS(ing)? */
		
		if request.method == "HEAD":
			_response.body = null
			
		response = _response
	
	def realMethodHandler(resource):
		switch request.method:
			case "HEAD":
			case "GET":
				break;
			
			case "POST"
			case "PUT"
				break;
			
			case "DELETE":
				break;
			
			case "TRACE":
				break;
					
	def respond(code):
		return Response({
			code
		})
			
		
Selector selector()
selector.addRead(new Server(createListeningSocket()))

selector.select()
